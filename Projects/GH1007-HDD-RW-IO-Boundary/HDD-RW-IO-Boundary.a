;ACME 0.96.4

!cpu 6502	; Compatible with all Apple2's
!to "HDD-RW-IO-Boundary", plain
!sl "HDD-RW-IO-Boundary.labels"
*=$6000

;------------------------------------------------------------------------------

!source "AppleDefs.a"
!source "HardDiskDefs.a"

;------------------------------------------------------------------------------

!zone code

entrypoint
	lda		$fc
	sta		saveFC
	lda		$fd
	sta		saveFD
	lda		$fe
	sta		saveFE
	lda		$ff
	sta		saveFF

	;
	; Reads from block #1, when LC is write-enabled
	;

	bit		$c081
	bit		$c081		; Read ROM; write RAM; use $D000 bank 2 (RESET default)

	lda		#<mem_blk_r_data
	sta		$fe
	lda		#>mem_blk_r_data
	sta		$ff

loop1
		ldy		#0
		lda		($fe),y
		sta		param_mem_block_l
		iny
		lda		($fe),y
		sta		param_mem_block_h
		jsr 	ENTRYPOINT_SMARTPORT
!zone data
mli0_0	!byte	CMD_READ
mli0_1	!byte	<param	; param_l
mli0_2	!byte	>param	; param_h
!zone code
		rol
		and		#1			; A=Carry (result)
		ldy		#2
		cmp		($fe),y
		beq		+
			lda		($fe),y
			bne		++
			jmp error_read
++			jmp error_read_io
+

		lda		$fe
		clc
		adc		#SIZE_MEMBLK_DATA
		sta		$fe
		bcc		+
			inc		$ff
+

		ldy		#0
		lda		($fe),y
		iny
		ora		($fe),y
		bne		loop1

	;
	; Read from block #1 to LC, when LC is write-protected
	;

	bit		$c082		; Read ROM; no write; use $D000 bank 2

	lda		#$00
	sta		param_mem_block_l
	lda		#$D0
	sta		param_mem_block_h
	jsr 	ENTRYPOINT_SMARTPORT
!zone data
mli0b_0	!byte	CMD_READ
mli0b_1	!byte	<param	; param_l
mli0b_2	!byte	>param	; param_h
!zone code
	bcs		+
		jmp error_read_lc_protected
+

	;
	; Writes to block #1, when LC is write-enabled
	;

	bit		$c081
	bit		$c081		; Read ROM; write RAM; use $D000 bank 2 (RESET default)

	; clear $BE00-BFFF
	lda 	#0
	sta		$fe
	lda		#$be
	sta		$ff
	ldy		#0
	lda		#0
	ldx		#2		; 2x 256 pages = 1x 512 blocks
	clc
-			sta		($fe),y
			iny
			bne		-
		inc		$ff
		dex
		bne		-

	lda		#<mem_blk_w_data
	sta		$fe
	lda		#>mem_blk_w_data
	sta		$ff

loop2
		ldy		#0
		lda		($fe),y
		sta		param_mem_block_l
		iny
		lda		($fe),y
		sta		param_mem_block_h
		jsr 	ENTRYPOINT_SMARTPORT
!zone data
mli1_0	!byte	CMD_WRITE
mli1_1	!byte	<param	; param_l
mli1_2	!byte	>param	; param_h
!zone code
		rol
		and		#1			; A=Carry (result)
		ldy		#2
		cmp		($fe),y
		beq		+
			lda		($fe),y
			bne		++
			jmp error_write
++			jmp error_write_io
+

		lda		$fe
		clc
		adc		#SIZE_MEMBLK_DATA
		sta		$fe
		bcc		+
			inc		$ff
+

		ldy		#0
		lda		($fe),y
		iny
		ora		($fe),y
		bne		loop2

	;
	; write $BE00 to block #1 (restore block #1 to all zeros)
	;

	lda		#$00
	sta		param_mem_block_l
	lda		#$be
	sta		param_mem_block_h
	jsr 	ENTRYPOINT_SMARTPORT
!zone data
mli2_0	!byte	CMD_WRITE
mli2_1	!byte	<param	; param_l
mli2_2	!byte	>param	; param_h
!zone code
	bcc		+
	jmp error_write
+

	;

success
	lda		#<msg0
	ldx		#>msg0
	jsr		print
	jmp		done

error_read
	lda		#<msg1
	ldx		#>msg1
	jsr		print
	jmp		done

error_read_io
	lda		#<msg2
	ldx		#>msg2
	jsr		print
	jmp		done

error_read_lc_protected
	lda		#<msg3
	ldx		#>msg3
	jsr		print
	jmp		done

error_write
	lda		#<msg4
	ldx		#>msg4
	jsr		print
	jmp		done

error_write_io
	lda		#<msg5
	ldx		#>msg5
	jsr		print
	jmp		done

	;

done
	lda		saveFC
	sta		$fc
	lda		saveFD
	sta		$fd
	lda		saveFE
	sta		$fe
	lda		saveFF
	sta		$ff

	rts

;--------------------------------------

; Pre: X:A = msg
print
	sta		$fe
	stx		$ff

	ldy		#0
.loop	lda		($fe),y
		beq		.pdone
		ora		#$80	; set high bit
		tax
		tya
		pha
		txa
		jsr		COUT
		pla
		tay
		iny
		bne 	.loop
.pdone
	rts

;------------------------------------------------------------------------------

!zone data

saveFC			!byte 0
saveFD			!byte 0
saveFE			!byte 0
saveFF			!byte 0

param
	!byte	3	; param length
	!byte	1	; unit
param_mem_block_l
	!byte	0	; mem_block_l
param_mem_block_h
	!byte	0	; mem_block_h
	!byte	1	; disk_block_l
	!byte	0	; disk_block_h

SIZE_MEMBLK_DATA = 3

!macro MEMBLK addr,carry {
	!word	addr
	!byte	carry
}

mem_blk_r_data
	+MEMBLK	$be00,0	; no I/O overlap (expect C=0)
	+MEMBLK	$be01,1	; 1 byte I/O overlap (expect C=1)
	+MEMBLK	$bfff,1	; 511 bytes I/O overlap (expect C=1)
	+MEMBLK	$cf00,1	; half in I/O and half in RAM (expect C=1)
	+MEMBLK	$d000,0	; no I/O overlap (expect C=0)
	+MEMBLK	$d080,0	; no I/O overlap, access 3 pages: $d0,d1,d2 (expect C=0)
	+MEMBLK $0000,0	;(end)

mem_blk_w_data
	+MEMBLK	$be00,0	; no I/O overlap (expect C=0)
	+MEMBLK	$be01,1	; 1 byte I/O overlap (expect C=1)
	+MEMBLK	$bfff,1	; 511 bytes I/O overlap (expect C=1)
	+MEMBLK	$cf00,1	; half in I/O and half in RAM (expect C=1)
	+MEMBLK	$d000,0	; no I/O overlap (expect C=0)
	;
	+MEMBLK	$fe00,0	; no wrap on 64KiB boundary (expect C=0)
	+MEMBLK	$fe01,0	; wraps on 64KiB boundary (expect C=0)
	+MEMBLK	$ff00,0	; wraps on 64KiB boundary (expect C=0)
	+MEMBLK	$ffff,0	; wraps on 64KiB boundary (expect C=0)
	+MEMBLK $0000,0	;(end)

msg0 !text "HDD read & write tests OK",0xd,0xa
msg0End !text 0

msg1 !text "Read error for block 1!",0xd,0xa
msg1End !text 0
msg2 !text "Read block to I/O succeeded when it should have failed!",0xd,0xa
msg2End !text 0

msg3 !text "Read block to ROM succeeded when it should have failed!",0xd,0xa
msg3End !text 0

msg4 !text "Write error for block 1!",0xd,0xa
msg4End !text 0
msg5 !text "Write block from I/O succeeded when it should have failed!",0xd,0xa
msg5End !text 0
